import React, { useState, useEffect, useRef } from 'react';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';
import { Bot, User, Send, Loader2, TrendingUp, DollarSign, Briefcase, Info } from 'lucide-react';

// Sample data (simulating content from the CSVs)
// Simula "Indicadores Econômicos e Financeiros.csv"
const sampleIndicatorsData = [
  { name: 'Margem Bruta', '2023': 60, '2024': 62, '2025P': 61 },
  { name: 'Margem EBITDA', '2023': 25, '2024': 27, '2025P': 26 },
  { name: 'Margem Líquida', '2023': 15, '2024': 17, '2025P': 16 },
  { name: 'ROE (%)', '2023': 18, '2024': 20, '2025P': 19 },
  { name: 'Dívida Líq./EBITDA (x)', '2023': 1.5, '2024': 1.3, '2025P': 1.2 }
];

// Simula "Financeiro.csv" (DRE Simplificada em milhares de BRL)
const sampleFinancialsData = [
  { conta: 'Receita Operacional Bruta', '2023': 1000, '2024': 1200, '2025P': 1500 },
  { conta: '(-) CPV', '2023': -400, '2024': -456, '2025P': -585 },
  { conta: '(=) Lucro Bruto', '2023': 600, '2024': 744, '2025P': 915, isTotal: true },
  { conta: '(-) Despesas Operacionais', '2023': -350, '2024': -420, '2025P': -525 },
  { conta: '(=) EBITDA', '2023': 250, '2024': 324, '2025P': 390, isTotal: true },
  { conta: '(-) Depreciação & Amortização', '2023': -50, '2024': -60, '2025P': -70 },
  { conta: '(=) EBIT', '2023': 200, '2024': 264, '2025P': 320, isTotal: true },
  { conta: '(-) Despesas Financeiras', '2023': -20, '2024': -25, '2025P': -30 },
  { conta: '(=) Lucro Antes do IR', '2023': 180, '2024': 239, '2025P': 290, isTotal: true },
  { conta: '(-) IR & CSLL', '2023': -30, '2024': -45, '2025P': -56 },
  { conta: '(=) Lucro Líquido', '2023': 150, '2024': 194, '2025P': 234, isTotal: true, isHighlight: true }
];

// Data for the chart (Lucro Líquido)
const chartData = [
  { year: '2023', "Lucro Líquido (R$ mil)": 150 },
  { year: '2024', "Lucro Líquido (R$ mil)": 194 },
  { year: '2025P', "Lucro Líquido (R$ mil)": 234 },
];

// Helper to format numbers
const formatCurrency = (value) => {
  if (typeof value !== 'number') return value;
  return value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL', minimumFractionDigits: 0 });
};
const formatPercentage = (value) => {
  if (typeof value !== 'number') return value;
  return `${value.toFixed(1)}%`;
};
const formatMultiplier = (value) => {
    if (typeof value !== 'number') return value;
    return `${value.toFixed(1)}x`;
}

const App = () => {
  console.log("App component mounting..."); // Log de depuração

  const [messages, setMessages] = useState([
    {
      id: 'initial',
      text: 'Olá! Sou seu assistente financeiro da LABirintar. Como posso ajudar com a análise dos dados financeiros hoje?',
      sender: 'ai',
    },
  ]);
  const [input, setInput] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const chatEndRef = useRef(null);

  const scrollToBottom = () => {
    chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(scrollToBottom, [messages]);

  const handleSendMessage = async () => {
    console.log("handleSendMessage called. Input:", input); // Log de depuração
    if (input.trim() === '') return;

    const newMessage = { id: Date.now().toString(), text: input, sender: 'user' };
    setMessages((prevMessages) => [...prevMessages, newMessage]);
    setInput('');
    setIsLoading(true);
    
    console.log("Preparing to call Gemini API..."); // Log de depuração

    // Prepare context from sample data
    const dataContext = `
      Dados Financeiros Chave da LABirintar:
      Indicadores Econômicos e Financeiros (2023, 2024, 2025 Previsto):
      ${sampleIndicatorsData.map(ind => `${ind.name}: ${ind['2023']} (2023), ${ind['2024']} (2024), ${ind['2025P']} (2025P)`).join('\n      ')}

      Resumo Financeiro (DRE em milhares de BRL - 2023, 2024, 2025 Previsto):
      ${sampleFinancialsData.map(fin => `${fin.conta}: ${fin['2023']} (2023), ${fin['2024']} (2024), ${fin['2025P']} (2025P)`).join('\n      ')}
    `;

    const prompt = `
      Você é um assistente de IA financeiro especializado na empresa LABirintar.
      Sua tarefa é analisar os dados financeiros e indicadores fornecidos para responder às perguntas do usuário de forma precisa e informativa.
      Se a pergunta não puder ser respondida com os dados fornecidos, indique isso claramente e explique que tipo de informação adicional seria necessária.
      Evite especulações e baseie suas respostas estritamente nos dados.
      Seja profissional, claro e conciso. Use o formato de moeda BRL (R$) quando apropriado.

      Contexto de Dados:
      ${dataContext}

      Pergunta do Usuário: "${input}"

      Sua Resposta:
    `;

    try {
      let chatHistory = [];
      chatHistory.push({ role: "user", parts: [{ text: prompt }] });
      const payload = { contents: chatHistory };
      const apiKey = ""; // Gemini API key will be handled by the environment
      const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;
      
      const response = await fetch(apiUrl, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload),
      });

      if (!response.ok) {
        const errorData = await response.json();
        console.error("API Error:", errorData);
        throw new Error(`Erro na API: ${response.statusText} - ${errorData?.error?.message || 'Detalhes não disponíveis'}`);
      }

      const result = await response.json();
      
      let aiResponseText = "Desculpe, não consegui processar a resposta.";
      if (result.candidates && result.candidates.length > 0 &&
          result.candidates[0].content && result.candidates[0].content.parts &&
          result.candidates[0].content.parts.length > 0) {
        aiResponseText = result.candidates[0].content.parts[0].text;
      } else {
        console.warn("Estrutura de resposta inesperada:", result);
      }

      const aiMessage = { id: Date.now().toString() + '-ai', text: aiResponseText, sender: 'ai' };
      setMessages((prevMessages) => [...prevMessages, aiMessage]);

    } catch (error) {
      console.error('Erro ao buscar resposta da IA:', error);
      const errorMessage = {
        id: Date.now().toString() + '-error',
        text: `Erro ao contatar a IA: ${error.message}. Por favor, tente novamente.`,
        sender: 'ai',
        isError: true,
      };
      setMessages((prevMessages) => [...prevMessages, errorMessage]);
    } finally {
      setIsLoading(false);
    }
  };
  
  const renderValue = (value, indicatorName) => {
    if (typeof value !== 'number') return value;
    if (indicatorName.includes('%') || indicatorName.toLowerCase().includes('margem')) {
        return formatPercentage(value);
    }
    if (indicatorName.toLowerCase().includes('(x)') || indicatorName.toLowerCase().includes('dívida líq./ebitda')) {
        return formatMultiplier(value);
    }
    return value.toLocaleString('pt-BR');
  };


  return (
    <div className="flex flex-col h-screen bg-gray-900 text-white font-inter">
      {/* Header */}
      <header className="bg-gray-800 p-4 shadow-md">
        <h1 className="text-3xl font-bold text-center text-sky-400 flex items-center justify-center">
          <Briefcase className="w-8 h-8 mr-3" /> LABirintar Financial AI Analyst
        </h1>
      </header>

      {/* Main Content Area */}
      <main className="flex-grow flex flex-col md:flex-row p-4 gap-4 overflow-hidden">
        {/* Data Visualization Section */}
        <section className="w-full md:w-1/2 lg:w-3/5 bg-gray-800 p-6 rounded-lg shadow-xl overflow-y-auto space-y-6">
          <h2 className="text-2xl font-semibold text-sky-300 mb-4 flex items-center">
            <TrendingUp className="w-6 h-6 mr-2" /> Visão Geral Financeira
          </h2>

          {/* Key Indicators Table */}
          <div>
            <h3 className="text-xl font-medium text-sky-400 mb-3">Principais Indicadores</h3>
            <div className="overflow-x-auto rounded-md">
              <table className="min-w-full divide-y divide-gray-700 bg-gray-800">
                <thead className="bg-gray-700/50">
                  <tr>
                    <th className="px-4 py-3 text-left text-xs font-medium text-sky-200 uppercase tracking-wider">Indicador</th>
                    <th className="px-4 py-3 text-right text-xs font-medium text-sky-200 uppercase tracking-wider">2023</th>
                    <th className="px-4 py-3 text-right text-xs font-medium text-sky-200 uppercase tracking-wider">2024</th>
                    <th className="px-4 py-3 text-right text-xs font-medium text-sky-200 uppercase tracking-wider">2025 (Previsto)</th>
                  </tr>
                </thead>
                <tbody className="bg-gray-800 divide-y divide-gray-700">
                  {sampleIndicatorsData.map((indicator, idx) => (
                    <tr key={idx} className="hover:bg-gray-700/70 transition-colors duration-150">
                      <td className="px-4 py-3 whitespace-nowrap text-sm font-medium text-gray-200">{indicator.name}</td>
                      <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-300 text-right">{renderValue(indicator['2023'], indicator.name)}</td>
                      <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-300 text-right">{renderValue(indicator['2024'], indicator.name)}</td>
                      <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-300 text-right">{renderValue(indicator['2025P'], indicator.name)}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
          
          {/* Financial Summary Table (DRE) */}
          <div>
            <h3 className="text-xl font-medium text-sky-400 mb-3 mt-6">Resumo Financeiro (DRE - R$ mil)</h3>
            <div className="overflow-x-auto rounded-md">
              <table className="min-w-full divide-y divide-gray-700 bg-gray-800">
                <thead className="bg-gray-700/50">
                  <tr>
                    <th className="px-4 py-3 text-left text-xs font-medium text-sky-200 uppercase tracking-wider">Conta</th>
                    <th className="px-4 py-3 text-right text-xs font-medium text-sky-200 uppercase tracking-wider">2023</th>
                    <th className="px-4 py-3 text-right text-xs font-medium text-sky-200 uppercase tracking-wider">2024</th>
                    <th className="px-4 py-3 text-right text-xs font-medium text-sky-200 uppercase tracking-wider">2025 (Previsto)</th>
                  </tr>
                </thead>
                <tbody className="bg-gray-800 divide-y divide-gray-700">
                  {sampleFinancialsData.map((item, idx) => (
                    <tr key={idx} className={`hover:bg-gray-700/70 transition-colors duration-150 ${item.isTotal ? 'font-semibold' : ''} ${item.isHighlight ? 'text-green-400' : 'text-gray-300'}`}>
                      <td className={`px-4 py-3 whitespace-nowrap text-sm ${item.isTotal ? 'text-gray-100' : 'text-gray-200'}`}>{item.conta}</td>
                      <td className="px-4 py-3 whitespace-nowrap text-sm text-right">{formatCurrency(item['2023'] * 1000)}</td>
                      <td className="px-4 py-3 whitespace-nowrap text-sm text-right">{formatCurrency(item['2024'] * 1000)}</td>
                      <td className="px-4 py-3 whitespace-nowrap text-sm text-right">{formatCurrency(item['2025P'] * 1000)}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>

          {/* Chart */}
          <div className="mt-6">
            <h3 className="text-xl font-medium text-sky-400 mb-3">Evolução do Lucro Líquido (R$ mil)</h3>
            <div className="h-64 md:h-80 bg-gray-800 p-2 rounded-md">
              <ResponsiveContainer width="100%" height="100%">
                <BarChart data={chartData} margin={{ top: 5, right: 20, left: 30, bottom: 5 }}>
                  <CartesianGrid strokeDasharray="3 3" stroke="#4A5568" />
                  <XAxis dataKey="year" tick={{ fill: '#A0AEC0' }} />
                  <YAxis tickFormatter={(value) => `R$${value/1000}k`} tick={{ fill: '#A0AEC0' }} />
                  <Tooltip
                    contentStyle={{ backgroundColor: '#2D3748', border: '1px solid #4A5568', borderRadius: '0.375rem' }}
                    labelStyle={{ color: '#E2E8F0', fontWeight: 'bold' }}
                    itemStyle={{ color: '#63B3ED' }}
                    formatter={(value) => [formatCurrency(value * 1000), "Lucro Líquido"]}
                  />
                  <Legend wrapperStyle={{ color: '#A0AEC0' }} />
                  <Bar dataKey="Lucro Líquido (R$ mil)" fill="#63B3ED" radius={[4, 4, 0, 0]} />
                </BarChart>
              </ResponsiveContainer>
            </div>
          </div>
          
          {/* Disclaimer */}
           <div className="mt-6 p-3 bg-gray-700/50 rounded-lg">
                <div className="flex items-start">
                    <Info size={20} className="text-sky-400 mr-2 mt-1 flex-shrink-0" />
                    <p className="text-xs text-gray-400">
                        <strong>Aviso:</strong> Os dados apresentados são amostras para fins de demonstração. As respostas da IA são baseadas neste conjunto limitado de dados e em seu conhecimento geral, e não devem ser consideradas como aconselhamento financeiro profissional.
                    </p>
                </div>
            </div>

        </section>

        {/* Chat Section */}
        <section className="w-full md:w-1/2 lg:w-2/5 bg-gray-800 p-6 rounded-lg shadow-xl flex flex-col">
          <h2 className="text-2xl font-semibold text-sky-300 mb-4 flex items-center">
            <Bot className="w-6 h-6 mr-2" /> Converse com a IA
          </h2>
          <div className="flex-grow bg-gray-900/70 p-4 rounded-md overflow-y-auto mb-4"> {/* Removidas classes scrollbar-* */}
            {messages.map((msg) => (
              <div
                key={msg.id}
                className={`flex mb-3 ${msg.sender === 'user' ? 'justify-end' : 'justify-start'}`}
              >
                <div
                  className={`max-w-xs lg:max-w-md px-4 py-3 rounded-xl shadow ${
                    msg.sender === 'user'
                      ? 'bg-sky-600 text-white'
                      : msg.isError 
                      ? 'bg-red-700 text-white' 
                      : 'bg-gray-700 text-gray-200'
                  }`}
                >
                  {msg.sender === 'ai' && !msg.isError && <Bot size={18} className="inline mr-2 mb-1 text-sky-400" />}
                  {msg.sender === 'user' && <User size={18} className="inline mr-2 mb-1" />}
                  {msg.isError && <Info size={18} className="inline mr-2 mb-1 text-yellow-300" />}
                  {/* Removidas classes prose-* do span abaixo */}
                  <span className="text-sm text-white" dangerouslySetInnerHTML={{ __html: msg.text.replace(/\n/g, '<br />') }}></span>
                </div>
              </div>
            ))}
            <div ref={chatEndRef} />
          </div>
          <div className="flex items-center mt-auto">
            <input
              type="text"
              value={input}
              onChange={(e) => setInput(e.target.value)}
              onKeyPress={(e) => e.key === 'Enter' && !isLoading && handleSendMessage()}
              placeholder="Pergunte sobre os dados financeiros..."
              className="flex-grow p-3 rounded-l-md bg-gray-700 text-gray-200 focus:ring-2 focus:ring-sky-500 focus:outline-none placeholder-gray-500"
              disabled={isLoading}
            />
            <button
              onClick={handleSendMessage}
              disabled={isLoading}
              className="bg-sky-600 text-white p-3 rounded-r-md hover:bg-sky-500 focus:outline-none focus:ring-2 focus:ring-sky-500 focus:ring-offset-2 focus:ring-offset-gray-800 disabled:opacity-50 disabled:cursor-not-allowed transition-colors duration-150"
            >
              {isLoading ? <Loader2 className="animate-spin w-6 h-6" /> : <Send className="w-6 h-6" />}
            </button>
          </div>
        </section>
      </main>
    </div>
  );
};

export default App;

